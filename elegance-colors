#!/bin/bash
# Script to change the colors of Elegance Colors Gnome Shell theme
#
# Copyright (C) 2012  Satyajit sahoo
#
# Contains code for getting color from wallpaper by Matthew Richardson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Set default paths
configdir="$HOME/.config/elegance-colors"
configfile="$configdir/elegance-colors.ini"
tempdir="$HOME/.cache/elegance-colors"
installdir="/usr/share/elegance-colors"
homedir=`awk -F: -v v="$(who | grep $(echo "$DISPLAY" | cut -d '.' -f 1) | cut -d ' ' -f 1 | tail -1)" '{if ($1==v) print $6}' /etc/passwd`
schemafile="org.gnome.shell.extensions.user-theme.gschema.xml"
schemadir="/usr/share/glib-2.0/schemas"
extensiondir="$homedir/.local/share/gnome-shell/extensions/user-theme@gnome-shell-extensions.gcampax.github.com/schemas"

show_info() {
echo -e "\033[0;32m[INFO $(date +"%H:%M:%S")]\033[0m $@"
}

show_warn() {
echo -e "\033[0;33m[WARN $(date +"%H:%M:%S")]\033[0m $@"
}

show_err() {
echo -e "\033[0;31m[ERR  $(date +"%H:%M:%S")]\033[0m $@" 1>&2
}

fix_schema() {
if [[ $(whoami) = "root" ]]; then
	if [[ -f "$extensiondir/$schemafile" ]]; then
		cp "$extensiondir/$schemafile" "$schemadir/$schemafile"
		glib-compile-schemas "$schemadir"
	else
		show_err "Could not find schema file. Is user-themes extension installed under '$homedir/.local/share/gnome-shell/extensions/'?"
		exit 1
	fi
else
	show_err "Root access is needed to fix schema for user-themes!"
	exit 1
fi
}

export_theme() {
if [[ -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	if [[ -z "$1" ]]; then
		read -p  "Enter a name for the theme: " themename
	else
		themename="$1"
	fi
	if [[ ! "$themename" = "" ]]; then
		rm -rf "$tempdir/elegance-colors.tmp"
		mkdir -p "$tempdir/elegance-colors.tmp"
		cp -r "$HOME/.themes/elegance-colors" "$tempdir/elegance-colors.tmp/$themename"
		cd "$tempdir/elegance-colors.tmp"
		echo -e "Name: $themename for $(gnome-shell --version)\nGenerated by: elegance-colors <http://fav.me/d525x6c>\nLicense: GPL-3.0+" >> "$themename/README"
		zip -FS -qr "$HOME/$themename.zip" "$themename"
		rm -rf "$tempdir/elegance-colors.tmp"
		if [[ -f "$HOME/$themename.zip" ]]; then
			show_info "Theme exported to '$HOME/$themename.zip'"
			exit
		else
			show_err "Could not export theme!"
			exit 1
		fi
	else
		show_err "Please enter a name for the theme!"
		exit 1
	fi
else
	show_err "Theme files not found!"
	exit 1
fi
}

get_color() {
if [[ "$mode" = "gtk" ]]; then
	show_info "GTK theme found at '$gtkpath'"
	# Get the color values from the gtk.css file
	if [[ `grep "@define-color selected_bg_color #" "$gtkpath"` ]]; then
		color=`grep "@define-color selected_bg_color" "$gtkpath" | sed -e "s/@define-color selected_bg_color //g" -e "s/;//g"`
	fi
	if [[ `grep "@define-color selected_fg_color #" "$gtkpath"` ]]; then
		text=`grep "@define-color selected_fg_color" "$gtkpath" | sed -e "s/@define-color selected_fg_color //g" -e "s/;//g"`
	fi
elif [[ "$mode" = "wallpaper" ]]; then
	show_info "Wallpaper found at '$img'"
	# Scale background image to 2x2 and take the color from top-left
	color=`convert "$img" -brightness-contrast 15% -fuzz 15% -alpha off -filter cubic -resize 2x2 -transparent black -colorspace RGB -format '%[pixel:s]' info:-`
	bf=`convert "$img" -colorspace gray -format "%[fx:100*mean]" info:`
	bi=$(printf "${bf/.*}")
	if [[ "$bi" -ge "70" ]]; then
		text="#000"
	else
		text="#fff"
	fi
elif [[ "$mode" =~ ^# || "$mode" =~ ^rgb ]]; then
	show_info "Using custom color"
	text="#fff"
	color="$mode"
fi
}

make_gradient() {
color="$1"
opacity="$2"
gradient="$3"
if [[ "$color" =~ ^# && ${#color} -eq 4 ]]; then
	red2=$((`echo "$color" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$color" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$color" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 3`))
elif [[ "$color" =~ ^# && ${#color} -eq 7 ]]; then
	red2=$((`echo "$color" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$color" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$color" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 3`))
elif [[ "$color" =~ ^rgb ]]; then
	red2=$(echo "$color" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green2=$(echo "$color" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue2=$(echo "$color" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
	opacity2=$(echo "$color" | sed -e 's/[a-z() ]//g' | cut -f4 -d\,)
else
	show_err "Invalid color '$color'"
fi
[[ "$opacity2" = "" ]] || opacity="$opacity2"
red1=$(( red2 + gradient ))
green1=$(( green2 + gradient ))
blue1=$(( blue2 + gradient ))
red3=$(( red2 - gradient ))
green3=$(( green2 - gradient ))
blue3=$(( blue2 - gradient ))
if [[ "$red1" -lt 255 && "$green1" -lt 255 && "$blue1" -lt 255 ]]; then
	color1="rgba($red1,$green1,$blue1,$opacity)"
	color2="rgba($red2,$green2,$blue2,$opacity)"
elif [[ "$red3" -gt 0 && "$green3" -gt 0 && "$blue3" -gt 0 ]]; then
	color1="rgba($red2,$green2,$blue2,$opacity)"
	color2="rgba($red3,$green3,$blue3,$opacity)"
else
	show_warn "Consider adjusting the color or gradient size"
	color1="rgba($red2,$green2,$blue2,$opacity)"
	color2="rgba($red2,$green2,$blue2,$opacity)"
fi
}

make_theme() {
# Set a temporary directory
makedir="$tempdir/elegance-colors-$(date +%H%M%S%N)"
# Get color values
get_color
# Generate gradient
make_gradient "$color" "1" "$selgradient"
custom_color1="$color1"
custom_color2="$color2"
# Copy Elegance Colors to create a new theme
if [[ -d "$installdir/gnome-shell" ]]; then
	mkdir -p "$makedir"
	cp -rf "$installdir/gnome-shell" "$makedir"
else
	show_err "Could not copy files"
fi
show_info "Making the theme"
# Set app icon style
if [[ "$panel_icon" = "false" ]]; then
	sed -i "s/\/\*appicon-visible//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/appicon-visible\*\///g" "$makedir/gnome-shell/gnome-shell.css"
fi
# Set arrow style
if [[ "$menu_arrow" = "true" ]]; then
	sed -i "s/\/\*arrow-on//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/arrow-on\*\///g" "$makedir/gnome-shell/gnome-shell.css"
else
	sed -i "s/\/\*arrow-off//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/arrow-off\*\///g" "$makedir/gnome-shell/gnome-shell.css"
fi
# Set buton style
if [[ "$newbutton" = "true" ]]; then
	sed -i "s/\/\*newbutton-on//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/newbutton-on\*\///g" "$makedir/gnome-shell/gnome-shell.css"
else
	sed -i "s/\/\*newbutton-off//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/newbutton-off\*\///g" "$makedir/gnome-shell/gnome-shell.css"
fi
# Set entry style
if [[ "$entry" = "true" ]]; then
	sed -i "s/\/\*entry-on//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/entry-on\*\///g" "$makedir/gnome-shell/gnome-shell.css"
else
	sed -i "s/\/\*entry-off//g" "$makedir/gnome-shell/gnome-shell.css"
	sed -i "s/entry-off\*\///g" "$makedir/gnome-shell/gnome-shell.css"
fi
# Arrange variables and values in an array
vars=( "@custom-color1" "@custom-color2" "@text-color" "@font-size" "@overview-bg1" "@overview-bg2" "@overview-border" "@border-radius" "@transition-duration" "@panel-bg1" "@panel-bg2" "@panel-color" "@panel-border" "@panel-shadow" "@corner-radius" "@menu-bg1" "@menu-bg2" "@menu-color" "@menu-border" "@menu-shadow" "@arrow-base" "@arrow-rise" "@dialog-bg1" "@dialog-bg2" "@dialog-color" "@dialog-heading" "@dialog-border" "@dialog-shadow" "@message-bg" "@message-border" )
values=( "$custom_color1" "$custom_color2" "$text" "$fontsize" "$overviewbg1" "$overviewbg2" "$overviewborder" "$roundness" "$transition" "$panelbg1" "$panelbg2" "$panel_fg" "$panelborder" "$panelshadow" "$panel_corner" "$menubg1" "$menubg2" "$menu_fg" "$menuborder" "$menushadow" "$arrowbase" "$arrowrise" "$dialogbg1" "$dialogbg2" "$dialog_fg" "$dialog_heading" "$dialogborder" "$dialogshadow" "$messagebg" "$messageborder" )
for (( i=0; i < ${#vars[@]}; i++ ))
do
	[[ "${values[i]}" = "" ]] && (( i++ ))
	show_info "Replacing ${vars[i]} with ${values[i]}"
	sed -i "s/${vars[i]}/${values[i]}/g" "$makedir/gnome-shell/gnome-shell.css"
done
# Copy the newly created theme
if [[ ! -d "$makedir/gnome-shell" || `grep "@" "$makedir/gnome-shell/gnome-shell.css"` ]]; then
	show_err "Could not make the theme"
else
	rm -rf "$HOME/.themes/elegance-colors"
	mkdir -p "$HOME/.themes/elegance-colors"
	mv "$makedir/gnome-shell" "$HOME/.themes/elegance-colors/"
fi
# Remove the temporary directory
rm -rf "$makedir"
}

set_theme() {
# Make the theme
make_theme
# Set the theme
if [[ -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	show_info "Reloading the theme"
	gsettings set org.gnome.shell.extensions.user-theme name "elegance-colors"
else
	show_err "Failed to reload the theme"
fi
# Enable or disable autostart
if [[ "$monitor" = "false" && ! -f "$HOME/.config/autostart/elegance-colors-process.desktop" ]]; then
	show_info "Disabling autostart"
	cp -f "/etc/xdg/autostart/elegance-colors-process.desktop" "$HOME/.config/autostart/elegance-colors-process.desktop"
	echo "X-GNOME-Autostart-enabled=false" >> "$HOME/.config/autostart/elegance-colors-process.desktop"
elif [[ "$monitor" = "true" && -f "$HOME/.config/autostart/elegance-colors-process.desktop" ]]; then
	show_info "Enabling autostart"
	rm -f "$HOME/.config/autostart/elegance-colors-process.desktop"
fi
}

monitor_changes() {
# Check if config has been changed
md5conf="$tempdir/conf-md5"
md5c=`md5sum "$configfile"`
if [[ -f "$md5conf" ]]; then
	oldmd5c=`cat "$md5conf"`
	if [[ ! "$oldmd5c" = "$md5c" ]]; then
	show_info "Configuration change detected"
	set_theme
	fi
fi
echo "$md5c" > "$md5conf"
# Check if the gtk theme has been changed
if [[ "$mode" = "gtk" ]]; then
	md5gtk="$tempdir/gtk-md5"
	md5g=`md5sum "$gtkpath"`
	if [[ -f "$md5gtk" ]]; then
		oldmd5g=`cat "$md5gtk"`
		if [[ ! "$oldmd5g" = "$md5g" ]]; then
			show_info "GTK theme change detected"
			set_theme
		fi
	fi
	echo "$md5g" > "$md5gtk"
# Check if the wallpaper has been changed
elif [[ "$mode" = "wallpaper" ]]; then
	md5bg="$tempdir/background-md5"
	md5b=`md5sum "$img"`
	if [[ -f "$md5bg" ]]; then
		oldmd5b=`cat "$md5bg"`
		if [[ ! "$oldmd5b" = "$md5b" ]]; then
			show_info "Wallpaper change detected"
			set_theme
		fi
	fi
	echo "$md5b" > "$md5bg"
fi
}

set_config() {
# Load the config file if exists
if [[ -f "$configfile" ]]; then
	mode=$(grep mode $configfile | cut -d '=' -f 2)
	monitor=$(grep monitor $configfile | cut -d '=' -f 2)
	newbutton=$(grep newbutton $configfile | cut -d '=' -f 2)
	entry=$(grep entry $configfile | cut -d '=' -f 2)
	fontsize=$(grep fontsize $configfile | cut -d '=' -f 2)
	selgradient=$(grep selgradient $configfile | cut -d '=' -f 2)
	dashgradient=$(grep dashgradient $configfile | cut -d '=' -f 2)
	roundness=$(grep roundness $configfile | cut -d '=' -f 2)
	transition=$(grep transition $configfile | cut -d '=' -f 2)
	panel_bg=$(grep panel_bg $configfile | cut -d '=' -f 2)
	panel_fg=$(grep panel_fg $configfile | cut -d '=' -f 2)
	panel_bordercol=$(grep panel_bordercol $configfile | cut -d '=' -f 2)
	panel_shadow=$(grep panel_shadow $configfile | cut -d '=' -f 2)
	panel_icon=$(grep panel_icon $configfile | cut -d '=' -f 2)
	panel_gradient=$(grep panel_gradient $configfile | cut -d '=' -f 2)
	panel_opacity=$(grep panel_opacity $configfile | cut -d '=' -f 2)
	panel_borderop=$(grep panel_borderop $configfile | cut -d '=' -f 2)
	panel_corner=$(grep panel_corner $configfile | cut -d '=' -f 2)
	menu_bg=$(grep menu_bg $configfile | cut -d '=' -f 2)
	menu_fg=$(grep menu_fg $configfile | cut -d '=' -f 2)
	menu_bordercol=$(grep menu_bordercol $configfile | cut -d '=' -f 2)
	menu_shadow=$(grep menu_shadow $configfile | cut -d '=' -f 2)
	menu_arrow=$(grep menu_arrow $configfile | cut -d '=' -f 2)
	menu_gradient=$(grep menu_gradient $configfile | cut -d '=' -f 2)
	menu_opacity=$(grep menu_opacity $configfile | cut -d '=' -f 2)
	menu_borderop=$(grep menu_borderop $configfile | cut -d '=' -f 2)
	dialog_bg=$(grep dialog_bg $configfile | cut -d '=' -f 2)
	dialog_fg=$(grep dialog_fg $configfile | cut -d '=' -f 2)
	dialog_heading=$(grep dialog_heading $configfile | cut -d '=' -f 2)
	dialog_bordercol=$(grep dialog_bordercol $configfile | cut -d '=' -f 2)
	dialog_shadow=$(grep dialog_shadow $configfile | cut -d '=' -f 2)
	dialog_gradient=$(grep dialog_gradient $configfile | cut -d '=' -f 2)
	dialog_opacity=$(grep dialog_opacity $configfile | cut -d '=' -f 2)
	dialog_borderop=$(grep dialog_borderop $configfile | cut -d '=' -f 2)
fi
# Set default config for unset variables
[[ -z "$mode" ]] && mode="wallpaper"
[[ -z "$monitor" ]] && monitor="true"
[[ -z "$newbutton" ]] && newbutton="false"
[[ -z "$entry" ]] && entry="false"
[[ -z "$fontsize" ]] && fontsize="10"
[[ -z "$selgradient" ]] && selgradient="0"
[[ -z "$dashgradient" ]] && dashgradient="0"
[[ -z "$roundness" ]] && roundness="3"
[[ -z "$transition" ]] && transition="150"
[[ -z "$panel_bg" ]] && panel_bg="rgb(0,0,0)"
[[ -z "$panel_fg" ]] && panel_fg="rgb(255,255,255)"
[[ -z "$panel_bordercol" ]] && panel_bordercol="rgb(0,0,0)"
[[ -z "$panel_shadow" ]] && panel_shadow="false"
[[ -z "$panel_icon" ]] && panel_icon="false"
[[ -z "$panel_gradient" ]] && panel_gradient="0"
[[ -z "$panel_opacity" ]] && panel_opacity="0.8"
[[ -z "$panel_borderop" ]] && panel_borderop="0.8"
[[ -z "$panel_corner" ]] && panel_corner="0"
[[ -z "$menu_bg" ]] && menu_bg="rgb(0,0,0)"
[[ -z "$menu_fg" ]] && menu_fg="rgb(255,255,255)"
[[ -z "$menu_bordercol" ]] && menu_bordercol="rgb(0,0,0)"
[[ -z "$menu_shadow" ]] && menu_shadow="false"
[[ -z "$menu_arrow" ]] && menu_arrow="true"
[[ -z "$menu_gradient" ]] && menu_gradient="0"
[[ -z "$menu_opacity" ]] && menu_opacity="0.8"
[[ -z "$menu_borderop" ]] && menu_borderop="0.8"
[[ -z "$dialog_bg" ]] && dialog_bg="rgb(0,0,0)"
[[ -z "$dialog_fg" ]] && dialog_fg="rgb(255,255,255)"
[[ -z "$dialog_heading" ]] && dialog_heading="rgb(255,255,255)"
[[ -z "$dialog_bordercol" ]] && dialog_bordercol="rgb(0,0,0)"
[[ -z "$dialog_shadow" ]] && dialog_shadow="false"
[[ -z "$dialog_gradient" ]] && dialog_gradient="0"
[[ -z "$dialog_opacity" ]] && dialog_opacity="0.8"
[[ -z "$dialog_borderop" ]] && dialog_borderop="0.2"
# Workaround for locales which use comma instead of dot
selgradient=$(echo "$selgradient" | sed -e 's/,/./g')
dashgradient=$(echo "$dashgradient" | sed -e 's/,/./g')
panel_gradient=$(echo "$panel_gradient" | sed -e 's/,/./g')
panel_opacity=$(echo "$panel_opacity" | sed -e 's/,/./g')
panel_borderop=$(echo "$panel_borderop" | sed -e 's/,/./g')
menu_gradient=$(echo "$menu_gradient" | sed -e 's/,/./g')
menu_opacity=$(echo "$menu_opacity" | sed -e 's/,/./g')
menu_borderop=$(echo "$menu_borderop" | sed -e 's/,/./g')
dialog_gradient=$(echo "$dialog_gradient" | sed -e 's/,/./g')
dialog_opacity=$(echo "$dialog_opacity" | sed -e 's/,/./g')
dialog_borderop=$(echo "$dialog_borderop" | sed -e 's/,/./g')
# Add units
fontsize="${fontsize}pt"
roundness="${roundness}px"
panel_corner="${panel_corner}px"
# Set shadows
if [[ "$panel_shadow" = "true" ]]; then
	panelshadow="0 0 5px 1px rgba(0,0,0,0.5)"
else
	panelshadow="none"
fi
if [[ "$menu_shadow" = "true" ]]; then
	menushadow="0 0 5px 1px rgba(0,0,0,0.5)"
else
	menushadow="none"
fi
if [[ "$dialog_shadow" = "true" ]]; then
	dialogshadow="0 0 5px 1px rgba(0,0,0,0.5)"
else
	dialogshadow="none"
fi
# Set arrow styles
if [[ "$menu_arrow" = "true" ]]; then
	arrowbase="21px"
	arrowrise="9px"
else
	arrowbase="0"
	arrowrise="3px"
fi
# Set colors
make_gradient "$panel_bg" "$panel_opacity" "$panel_gradient"
panelbg1="$color1"
panelbg2="$color2"
make_gradient "$panel_bordercol" "$panel_borderop" "0"
panelborder="$color1"
make_gradient "$menu_bg" "$menu_opacity" "$menu_gradient"
menubg1="$color1"
menubg2="$color2"
make_gradient "$menu_bordercol" "$menu_borderop" "0"
menuborder="$color1"
make_gradient "$dialog_bg" "$dialog_opacity" "$dialog_gradient"
dialogbg1="$color1"
dialogbg2="$color2"
make_gradient "$dialog_bordercol" "$dialog_borderop" "0"
dialogborder="$color1"
# Set overview style
make_gradient "$panel_bg" "$panel_opacity" "$dashgradient"
overviewbg1="$color1"
overviewbg2="$color2"
make_gradient "$panel_bordercol" "$panel_borderop" "0"
overviewborder="$color1"
# Set message tray style
if [[ "$panel_opacity" = "0" ]]; then
	messagebg="transparent"
	messageborder="transparent"
else
	make_gradient "$panel_bg" "0.1" "0"
	messagebg="$color1"
	make_gradient "$panel_bordercol" "0.1" "0"
	messageborder="$color1"
fi
}

initialize() {
# If config directory doesn't exist, create it
[[ -d "$configdir" ]] || mkdir -p "$configdir"
# If config file doesn't exist, copy the default one
[[ -f "$configfile" ]] || cp -f "$installdir/presets/default.ini" "$configfile"
# Create the temporary directory
[[ -d "$tempdir" ]] || mkdir -p "$tempdir"
# Delete previous temporary files
rm -rf "$tempdir/elegance-colors"-*
# Get the gtk theme name
themename=$(gsettings get org.gnome.desktop.interface gtk-theme)
gtktheme=$(echo $themename | sed "s/'//g")
theme=$(printf "${gtktheme//%/\\x}")
# Get the gtk theme path
if [[ -f "$HOME/.themes/$theme/gtk-3.0/gtk-main.css" ]]; then
	gtkpath="$HOME/.themes/$theme/gtk-3.0/gtk-main.css"
elif [[ -f "$HOME/.themes/$theme/gtk-3.0/gtk.css" ]]; then
	gtkpath="$HOME/.themes/$theme/gtk-3.0/gtk.css"
elif [[ -f "/usr/share/themes/$theme/gtk-3.0/gtk-main.css" ]]; then
	gtkpath="/usr/share/themes/$theme/gtk-3.0/gtk-main.css"
elif [[ -f "/usr/share/themes/$theme/gtk-3.0/gtk.css" ]]; then
	gtkpath="/usr/share/themes/$theme/gtk-3.0/gtk.css"
fi
# Get the background image path
path=$(gsettings get org.gnome.desktop.background picture-uri)
bg=$(echo "$path" | sed -e "s/'//g" -e "s/file:\/\///g")
img=$(printf "${bg//%/\\x}")
# See if the returned image is a xml file
if [[ "$img" =~ .xml$ ]]; then
	img=$(grep "<file>" "$img" | grep ".jpg\|.png" | sed -e 's/<file>//' -e 's/<\/file>//' | head -n 1)
fi
# If elegance-colors doesn't exist in ~./themes, create it
if [[ ! -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	set_config
	make_theme
fi
}

stop_process() {
if [[ -f "$tempdir/elegance-colors.pid" ]]; then
	pid=$(cat "$tempdir/elegance-colors.pid")
	rm -f "$tempdir/elegance-colors.pid"
	if [[ `grep -s elegance-colors "/proc/$pid/cmdline"` ]]; then
		kill -9 "$pid"
		show_info "Killed process $pid"
	else
		show_warn "$pid does not seem to be elegance-colors"
	fi
else
	show_err "No process found"
fi
}

run_process() {
show_info "Starting process"
# Stop any previous instances first
[[ -f "$tempdir/elegance-colors.pid" ]] && stop_process
# Write the pid to a file
echo "$$" > "$tempdir/elegance-colors.pid"
while true; do
	# Don't run as root
	if [[ $(whoami) = "root" ]]; then
		show_err "Cannot run as root"
		exit 1
	fi
	# No need to run in background if Gnome Shell is not running
	if ( [ ! "$(pidof gnome-shell)" ] ); then
		show_err "Gnome Shell not running"
		exit 1
	fi
	# Verify if schema file exists
	if [[ ! -f "$schemadir/$schemafile" ]]; then
		show_err "Could not find schema for user-themes. Run 'elegance-colors fix' as root to fix the problem"
		exit 1
	fi
	initialize
	set_config
	# Check if the current theme name matches elegance-colors
	if [[ `gsettings get org.gnome.shell.extensions.user-theme name | grep -i "elegance-colors"` ]]; then
		monitor_changes
	fi
	sleep 5
done
}

apply_changes() {
initialize
set_config
if [[ `gsettings get org.gnome.shell.extensions.user-theme name | grep -i "elegance-colors"` ]]; then
	set_theme
else
	make_theme
fi
}

case "$1" in
	"start")
		run_process;;
	"stop")
		stop_process;;
	"apply")
		apply_changes;;
	"gui")
		elegance-colors-gui;;
	"export")
		export_theme "$2";;
	"fix")
		fix_schema;;
	"help")
		man elegance-colors;;
	*)
		exec "$0" start > /dev/null 2>&1 &
		disown;;
esac
