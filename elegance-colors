#!/bin/bash
# Script to change the colors of Elegance Colors Gnome Shell theme
#
# Copyright (C) 2012  Satyajit sahoo
#
# Contains code for getting color from wallpaper by Matthew Richardson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Set paths and variables
shellversion=
selfdir=`cd $(dirname "${BASH_SOURCE[0]}") && pwd`
selffile="$selfdir/elegance-colors"
configdir="$HOME/.config/elegance-colors"
configfile="$configdir/elegance-colors.ini"
tempdir="/tmp/elegance-colors"
installdir=`if [[ -d "$selfdir/templates" && -d "$selfdir/presets" ]]; then printf "$selfdir"; else printf "/usr/share/elegance-colors"; fi`
defaultconfig="$installdir/presets/default.ini"
template="$installdir/templates/$(gnome-shell --version | cut -f3 -d\  | cut -f1-2 -d.)"
glibschemas="/usr/share/glib-2.0/schemas"
extensiondir="$HOME/.local/share/gnome-shell/extensions/user-theme@gnome-shell-extensions.gcampax.github.com/schemas"
schemafile="org.gnome.shell.extensions.user-theme.gschema.xml"

show_info() {
echo -e "\033[0;32m[INFO $(date +"%H:%M:%S")]\033[0m $@"
}

show_warn() {
echo -e "\033[0;33m[WARN $(date +"%H:%M:%S")]\033[0m $@"
}

show_err() {
echo -e "\033[0;31m[ERR  $(date +"%H:%M:%S")]\033[0m $@" 1>&2
}

notify_err() {
show_err "$@"
notify-send -h int:transient:1 -i dialog-error "Elegance Colors" "$@"
}

export_theme() {
if [[ -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	if [[ -z "$1" ]]; then
		read -p  "Enter a name for the theme: " themename
		themefile="$themename.zip"
		themepath="$HOME"
	else
		themefile="${1##*/}"
		themename="${themefile%*.zip}"
		themepath="${1%/*}"
	fi
	rm -rf "$tempdir/elegance-colors.tmp"
	mkdir -p "$tempdir/elegance-colors.tmp"
	cp -r "$HOME/.themes/elegance-colors" "$tempdir/elegance-colors.tmp/$themename"
	cd "$tempdir/elegance-colors.tmp"
	echo -e "Name: $themename for $(gnome-shell --version)\nGenerated by: elegance-colors <http://fav.me/d525x6c>\nLicense: GPL-3.0+" >> "$themename/README"
	zip -FS -qr "$themepath/$themefile" "$themename"
	rm -rf "$tempdir/elegance-colors.tmp"
	if [[ -f "$themepath/$themefile" ]]; then
		show_info "Theme exported to '$themepath/$themefile'"
		exit
	else
		notify_err "Failed to export theme!"
		exit 1
	fi
else
	notify_err "Theme files not found!"
	exit 1
fi
}

get_color() {
if [[ "$mode" = "gtk" ]]; then
	show_info "GTK theme found at '$gtkpath'"
	# Get the color values from the gtk.css file
	if [[ `grep "@define-color selected_bg_color #" "$gtkpath"` || `grep "@define-color selected_bg_color rgb" "$gtkpath"` ]]; then
		color=`grep "@define-color selected_bg_color" "$gtkpath" | sed -e "s/@define-color selected_bg_color //g" -e "s/;//g"`
	elif [[ `grep "@define-color theme_selected_bg_color #" "$gtkpath"` || `grep "@define-color theme_selected_bg_color rgb" "$gtkpath"` ]]; then
		color=`grep "@define-color theme_selected_bg_color" "$gtkpath" | sed -e "s/@define-color theme_selected_bg_color //g" -e "s/;//g"`
	fi
	if [[ `grep "@define-color selected_fg_color #" "$gtkpath"` || `grep "@define-color selected_fg_color rgb" "$gtkpath"` ]]; then
		selected_fg=`grep "@define-color selected_fg_color" "$gtkpath" | sed -e "s/@define-color selected_fg_color //g" -e "s/;//g"`
	elif [[ `grep "@define-color theme_selected_fg_color #" "$gtkpath"` || `grep "@define-color theme_selected_fg_color rgb" "$gtkpath"` ]]; then
		selected_fg=`grep "@define-color theme_selected_fg_color" "$gtkpath" | sed -e "s/@define-color theme_selected_fg_color //g" -e "s/;//g"`
	fi
elif [[ "$mode" = "wallpaper" ]]; then
	show_info "Wallpaper found at '$img'"
	# Scale background image to 3x3 and take the color from top-left
	color=`convert "$img" -brightness-contrast 15% -fuzz 15% -alpha off -filter cubic -resize 3x3 -transparent black -colorspace RGB -format '%[pixel:s]' info:-`
	bf=`convert "$img" -colorspace gray -format "%[fx:100*mean]" info:`
	bi="${bf/.*}"
	# Adjust text color according to the color brightness
	if [[ "$bi" -ge "60" ]]; then
		selected_fg="#000"
	else
		selected_fg="#fff"
	fi
else
	show_info "Using custom color"
	selected_fg="#fff"
fi
}

make_gradient() {
basecolor="$1"
gradient="$2"
[[ "$basecolor" = "$mode" ]] && basecolor="$color"
if [[ "$basecolor" =~ ^rgba ]]; then
	red2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
	opacity=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f4 -d\,)
elif [[ "$basecolor" =~ ^rgb ]]; then
	red2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue2=$(echo "$basecolor" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
	opacity="1.0"
elif [[ "$basecolor" =~ ^# && "${#basecolor}" -eq 4 ]]; then
	red2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 3`))
	opacity="1.0"
elif [[ "$basecolor" =~ ^# && "${#basecolor}" -eq 7 ]]; then
	red2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$basecolor" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 3`))
	opacity="1.0"
else
	show_err "Invalid color '$basecolor'"
fi
red1=$(( red2 + gradient ))
green1=$(( green2 + gradient ))
blue1=$(( blue2 + gradient ))
red3=$(( red2 - gradient ))
green3=$(( green2 - gradient ))
blue3=$(( blue2 - gradient ))
if [[ "$red1" -lt 255 && "$green1" -lt 255 && "$blue1" -lt 255 ]]; then
	color1="rgba($red1,$green1,$blue1,$opacity)"
	color2="rgba($red2,$green2,$blue2,$opacity)"
elif [[ "$red3" -gt 0 && "$green3" -gt 0 && "$blue3" -gt 0 ]]; then
	color1="rgba($red2,$green2,$blue2,$opacity)"
	color2="rgba($red3,$green3,$blue3,$opacity)"
else
	show_warn "Consider adjusting the color or gradient size"
	color1="rgba($red2,$green2,$blue2,$opacity)"
	color2="rgba($red2,$green2,$blue2,$opacity)"
fi
}

make_tint() {
color1="$1"
color2="$2"
amount="$3"
[[ "$color1" = "$mode" ]] && color1="$color"
[[ "$color2" = "$mode" ]] && color2="$color"
if [[ "$color1" =~ ^rgb ]]; then
	red1=$(echo "$color1" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green1=$(echo "$color1" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue1=$(echo "$color1" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
elif [[ "$color1" =~ ^# && "${#color1}" -eq 4 ]]; then
	red1=$((`echo "$color1" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 1`))
	green1=$((`echo "$color1" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 2`))
	blue1=$((`echo "$color1" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 3`))
elif [[ "$color1" =~ ^# && "${#color1}" -eq 7 ]]; then
	red1=$((`echo "$color1" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 1`))
	green1=$((`echo "$color1" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 2`))
	blue1=$((`echo "$color1" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 3`))
else
	show_err "Invalid color '$color1'"
fi
if [[ "$color2" =~ ^rgba ]]; then
	red2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
	opacity=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f4 -d\,)
elif [[ "$color2" =~ ^rgb ]]; then
	red2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f1 -d\,)
	green2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f2 -d\,)
	blue2=$(echo "$color2" | sed -e 's/[a-z() ]//g' | cut -f3 -d\,)
	opacity="1.0"
elif [[ "$color2" =~ ^# && "${#color2}" -eq 4 ]]; then
	red2=$((`echo "$color2" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$color2" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$color2" | sed -e 's/#//g' -e 's/./0x&&,/g' | cut -d ',' -f 3`))
	opacity="1.0"
elif [[ "$color2" =~ ^# && "${#color2}" -eq 7 ]]; then
	red2=$((`echo "$color2" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 1`))
	green2=$((`echo "$color2" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 2`))
	blue2=$((`echo "$color2" | sed -e 's/#//g' -e 's/../0x&,/g' | cut -d ',' -f 3`))
	opacity="1.0"
else
	show_err "Invalid color '$color2'"
fi
red=$(( ( ( red1 * amount ) + ( red2 * 30 ) ) / ( amount + 30 ) ))
green=$(( ( ( green1 * amount ) + ( green2 * 30 ) ) / ( amount + 30 ) ))
blue=$(( ( ( blue1 * amount ) + ( blue2 * 30 ) ) / ( amount + 30 ) ))
chameleon="rgba($red,$green,$blue,$opacity)"
}

set_theme() {
# Initialize variables
SAVEIFS="$IFS"
IFS=''
unset vars vals
# General settings
get_color
make_gradient "$color" "$selgradient"
selected_bg1="$color1"
selected_bg2="$color2"
font_family=$(echo "$fontname" | sed 's/\ \w*$//')
font_size=$(echo "$fontname" | sed 's/.* //')
vars=(
	"${vars[@]}"
	"@selected_bg1"
	"@selected_bg2"
	"@selected_fg"
	"@font_family"
	"@font_size"
	"@roundness"
	"@transition"
)
vals=(
	"${vals[@]}"
	"$selected_bg1"
	"$selected_bg2"
	"$selected_fg"
	"$font_family"
	"${font_size}pt"
	"${roundness}px"
	"$transition"
)
# Panel
make_gradient "$panel_bg" "$panel_gradient"
panel_bg1="$color1"
panel_bg2="$color2"
make_tint "$color" "$panel_bg1" "$panel_tint"
panel_bg1="$chameleon"
make_tint "$color" "$panel_bg2" "$panel_tint"
panel_bg2="$chameleon"
vars=(
	"${vars[@]}"
	"@panel_bg1"
	"@panel_bg2"
	"@panel_fg"
	"@panel_border"
	"@panel_corner"
	"\/\*panelshadow_$panel_shadow"
	"panelshadow_$panel_shadow\*\/"
	"\/\*panelicon_$panel_icon"
	"panelicon_$panel_icon\*\/"
)
vals=(
	"${vals[@]}"
	"$panel_bg1"
	"$panel_bg2"
	"$panel_fg"
	"$panel_border"
	"${panel_corner}px"
	"\/\*\*\/"
	"\/\*\*\/"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Overview
make_gradient "$overview_bg" "$overview_gradient"
overview_bg1="$color1"
overview_bg2="$color2"
make_tint "$color" "$overview_bg1" "$overview_tint"
overview_bg1="$chameleon"
make_tint "$color" "$overview_bg2" "$overview_tint"
overview_bg2="$chameleon"
# Icon size dash
overview_itemsize=$(( overview_iconsize + overview_iconspacing - 2 ))
vars=(
	"${vars[@]}"
	"@overview_bg1"
	"@overview_bg2"
	"@overview_iconsize"
	"@overview_itemsize"
	"@overview_iconspacing"
)
vals=(
	"${vals[@]}"
	"$overview_bg1"
	"$overview_bg2"
	"${overview_iconsize}px"
	"${overview_itemsize}px"
	"${overview_iconspacing}px"
)
# Dash
make_gradient "$dash_bg" "$dash_gradient"
dash_bg1="$color1"
dash_bg2="$color2"
make_tint "$color" "$dash_bg1" "$dash_tint"
dash_bg1="$chameleon"
make_tint "$color" "$dash_bg2" "$dash_tint"
dash_bg2="$chameleon"
vars=(
	"${vars[@]}"
	"@dash_fg"
	"@dash_bg1"
	"@dash_bg2"
	"@dash_border"
	"\/\*dashshadow_$dash_shadow"
	"dashshadow_$dash_shadow\*\/"
)
vals=(
	"${vals[@]}"
	"$dash_fg"
	"$dash_bg1"
	"$dash_bg2"
	"$dash_border"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Menu
make_gradient "$menu_bg" "$menu_gradient"
menu_bg1="$color1"
menu_bg2="$color2"
make_tint "$color" "$menu_bg1" "$menu_tint"
menu_bg1="$chameleon"
make_tint "$color" "$menu_bg2" "$menu_tint"
menu_bg2="$chameleon"
vars=(
	"${vars[@]}"
	"@menu_bg1"
	"@menu_bg2"
	"@menu_fg"
	"@menu_border"
	"\/\*menushadow_$menu_shadow"
	"menushadow_$menu_shadow\*\/"
	"\/\*arrow_$menu_arrow"
	"arrow_$menu_arrow\*\/"
)
vals=(
	"${vals[@]}"
	"$menu_bg1"
	"$menu_bg2"
	"$menu_fg"
	"$menu_border"
	"\/\*\*\/"
	"\/\*\*\/"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Buttons
make_gradient "$button_bg" "$button_gradient"
button_bg1="$color1"
button_bg2="$color2"
make_gradient "$button_hoverbg" "$button_gradient"
button_hoverbg1="$color1"
button_hoverbg2="$color2"
make_gradient "$button_activebg" "$button_gradient"
button_activebg1="$color1"
button_activebg2="$color2"
vars=(
	"${vars[@]}"
	"@button_bg1"
	"@button_bg2"
	"@button_hoverbg1"
	"@button_hoverbg2"
	"@button_activebg1"
	"@button_activebg2"
	"@button_fg"
	"@button_hoverfg"
	"@button_activefg"
	"@button_border"
	"@button_hoverborder"
	"@button_activeborder"
	"\/\*buttonbold_$button_bold"
	"buttonbold_$button_bold\*\/"
)
vals=(
	"${vals[@]}"
	"$button_bg1"
	"$button_bg2"
	"$button_hoverbg1"
	"$button_hoverbg2"
	"$button_activebg1"
	"$button_activebg2"
	"$button_fg"
	"$button_hoverfg"
	"$button_activefg"
	"$button_border"
	"$button_hoverborder"
	"$button_activeborder"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Entry
make_gradient "$entry_bg" "$entry_gradient"
entry_bg1="$color1"
entry_bg2="$color2"
make_gradient "$entry_focusbg" "$entry_gradient"
entry_focusbg1="$color1"
entry_focusbg2="$color2"
vars=(
	"${vars[@]}"
	"@entry_bg1"
	"@entry_bg2"
	"@entry_focusbg1"
	"@entry_focusbg2"
	"@entry_fg"
	"@entry_focusfg"
	"@entry_border"
	"@entry_focusborder"
	"\/\*entryshadow_$entry_shadow"
	"entryshadow_$entry_shadow\*\/"
)
vals=(
	"${vals[@]}"
	"$entry_bg1"
	"$entry_bg2"
	"$entry_focusbg1"
	"$entry_focusbg2"
	"$entry_fg"
	"$entry_focusfg"
	"$entry_border"
	"$entry_focusborder"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Dialogs
make_gradient "$dialog_bg" "$dialog_gradient"
dialog_bg1="$color1"
dialog_bg2="$color2"
make_tint "$color" "$dialog_bg1" "$dialog_tint"
dialog_bg1="$chameleon"
make_tint "$color" "$dialog_bg2" "$dialog_tint"
dialog_bg2="$chameleon"
vars=(
	"${vars[@]}"
	"@dialog_bg1"
	"@dialog_bg2"
	"@dialog_fg"
	"@dialog_heading"
	"@dialog_border"
	"\/\*dialogshadow_$dialog_shadow"
	"dialogshadow_$dialog_shadow\*\/"
)
vals=(
	"${vals[@]}"
	"$dialog_bg1"
	"$dialog_bg2"
	"$dialog_fg"
	"$dialog_heading"
	"$dialog_border"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Set a temporary directory
makedir="$tempdir/elegance-colors-$(date +%H%M%S%N)/gnome-shell"
# Copy Elegance Colors to create a new theme
if [[ -d "$template" ]]; then
	mkdir -p "$makedir"
	show_info "Using template '$template'"
	cp -rf "$template/." "$makedir"
else
	show_err "Failed to copy files"
fi
# Replace variables in the template
show_info "Making the theme"
for (( i=0; i < ${#vars[@]}; i++ ))
do
	if [[ ! `grep "${vars[i]}" "$makedir/gnome-shell.css"` ]]; then
		show_warn "Template does not have any ${vars[i]} variable"
	elif [[ "${vals[i]}" = "" ]]; then
		show_warn "The value of ${vars[i]} variable is not set"
	else
		[[ "${vals[i]}" = "$mode" ]] && vals[i]="$color"
		show_info "Replacing ${vars[i]} with ${vals[i]}"
		sed -i "s/${vars[i]}/${vals[i]}/g" "$makedir/gnome-shell.css"
	fi
done
# Copy the newly created theme
if [[ ! -d "$makedir" ]]; then
	show_err "Failed to make the theme, files were lost"
elif [[ `grep "@" "$makedir/gnome-shell.css"` ]]; then
	show_err "Failed to make the theme, could not replace variables"
	grep "@" "$makedir/gnome-shell.css" | sort -u
elif [[ `grep ",," "$makedir/gnome-shell.css"` ]]; then
	show_err "Failed to make the theme, invalid color expression"
	grep ",," "$makedir/gnome-shell.css" | sort -u
else
	rm -rf "$HOME/.themes/elegance-colors"
	mkdir -p "$HOME/.themes/elegance-colors"
	mv "$makedir" "$HOME/.themes/elegance-colors/"
	# Set the theme
	if [[ `gsettings --schemadir "$schemadir" get org.gnome.shell.extensions.user-theme name | grep -i "elegance-colors"` ]]; then
		show_info "Reloading the theme"
		gsettings --schemadir "$schemadir" set org.gnome.shell.extensions.user-theme name 'elegance-colors'
	fi
fi
# Remove the temporary directory
rm -rf "$makedir"
# Restore previous IFS
IFS="$SAVEIFS"
}

monitor_changes() {
# Check if config has been changed
md5conf="$tempdir/conf-md5"
md5c=`md5sum "$configfile"`
if [[ -f "$md5conf" ]]; then
	oldmd5c=`cat "$md5conf"`
	if [[ ! "$oldmd5c" = "$md5c" ]]; then
		show_info "Configuration change detected"
		set_theme
	fi
fi
echo "$md5c" > "$md5conf"
# Check if the gtk theme has been changed
if [[ "$mode" = "gtk" ]]; then
	md5gtk="$tempdir/gtk-md5"
	md5g=`md5sum "$gtkpath"`
	if [[ -f "$md5gtk" ]]; then
		oldmd5g=`cat "$md5gtk"`
		if [[ ! "$oldmd5g" = "$md5g" ]]; then
			show_info "GTK theme change detected"
			set_theme
		fi
	fi
	echo "$md5g" > "$md5gtk"
# Check if the wallpaper has been changed
elif [[ "$mode" = "wallpaper" ]]; then
	md5bg="$tempdir/background-md5"
	md5b=`md5sum "$img"`
	if [[ -f "$md5bg" ]]; then
		oldmd5b=`cat "$md5bg"`
		if [[ ! "$oldmd5b" = "$md5b" ]]; then
			show_info "Wallpaper change detected"
			set_theme
		fi
	fi
	echo "$md5b" > "$md5bg"
fi
}

read_config() {
# Update the old config file to support new options
while IFS='= ' read var val; do
	# Escape comments
	[[ $var =~ ^# ]] && continue
	# Escape custom values
	[[ $var =~ \[custom\]$ ]] && continue
	# Read the section header
	[[ $var =~ ^\[ ]] && section="$var"
	# Write the non-existent value into the config file
	[[ `grep "$var" "$configfile"` ]] || echo -e "\n$section\n$var=$val" >> "$configfile"
done < "$defaultconfig"
# Load the config file
while IFS='= ' read var val; do
	# Escape comments, section headers and empty values
	[[ $var =~ ^# || $var =~ ^\[ || ! $val ]] && continue
	# Workaround for locales which use "," instead of "."
	[[ "$val" =~ ^[0-9]+.[0-9]+$ ]] && val="${val//,/.}"
	# Symbolic values
	[[ "$val" =~ ^@ ]] && val="${val//@/}" && val="${!val}"
	# Escape "(", ")" and " " for safe use in eval
	val="${val//\(/\\(}" && val="${val//\)/\\)}" && val="${val//\ /\\ }"
	# Define variables
	eval "$var"="$val"
done < "$configfile"
}

set_schemadir() {
# Set the schemadir
if [[ -f "$extensiondir/$schemafile" && -f "$extensiondir/gschemas.compiled" ]]; then
	schemadir="$extensiondir"
elif [[ -f "$glibschemas/$schemafile" && -f "$glibschemas/gschemas.compiled" ]]; then
	schemadir="$glibschemas"
else
	return 1
fi
}

initialize() {
# Verify if User themes extension is installed and set schemadir
set_schemadir
if [[ ! $? -eq 0 ]]; then
	notify_err "User themes extension is not installed, please install from https://extensions.gnome.org/extension/19/user-themes/"
	# Wait till the User theme extension is installed
	until set_schemadir; do
		sleep 5
	done
fi
# If config directory doesn't exist, create it
[[ -d "$configdir" ]] || mkdir -p "$configdir"
# If config file doesn't exist, copy the default one
[[ -f "$configfile" ]] || cp -f "$defaultconfig" "$configfile"
# Create the temporary directory
[[ -d "$tempdir" ]] || mkdir -p "$tempdir"
# Read the configuration
read_config
# Get the gtk theme name
theme=$(gsettings get org.gnome.desktop.interface gtk-theme | sed -e "s/'//g")
# Get the gtk theme path
if [[ -f "$HOME/.themes/$theme/gtk-3.0/gtk-main.css" ]]; then
	gtkpath="$HOME/.themes/$theme/gtk-3.0/gtk-main.css"
elif [[ -f "$HOME/.themes/$theme/gtk-3.0/gtk.css" ]]; then
	gtkpath="$HOME/.themes/$theme/gtk-3.0/gtk.css"
elif [[ -f "/usr/share/themes/$theme/gtk-3.0/gtk-main.css" ]]; then
	gtkpath="/usr/share/themes/$theme/gtk-3.0/gtk-main.css"
elif [[ -f "/usr/share/themes/$theme/gtk-3.0/gtk.css" ]]; then
	gtkpath="/usr/share/themes/$theme/gtk-3.0/gtk.css"
fi
# Get the background image path
img=$(gsettings get org.gnome.desktop.background picture-uri | sed -e "s/'//g" -e "s/file:\/\///g" -e 's/\%20/\ /g')
# See if the returned image is a xml file
if [[ "$img" =~ .xml$ ]]; then
	img=$(grep "<file>" "$img" | grep ".jpg\|.png" | sed -e 's/<file>//' -e 's/<\/file>//' | head -n 1)
fi
# If elegance-colors doesn't exist in ~./themes, create it
if [[ ! -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	set_theme
fi
# Enable or disable autostart
if [[ "$monitor" = "false" && ! -f "$HOME/.config/autostart/elegance-colors-process.desktop" ]]; then
	show_info "Disabling autostart"
	cp -f "/etc/xdg/autostart/elegance-colors-process.desktop" "$HOME/.config/autostart/elegance-colors-process.desktop"
	echo "X-GNOME-Autostart-enabled=false" >> "$HOME/.config/autostart/elegance-colors-process.desktop"
elif [[ "$monitor" = "true" && -f "$HOME/.config/autostart/elegance-colors-process.desktop" ]]; then
	show_info "Enabling autostart"
	rm -f "$HOME/.config/autostart/elegance-colors-process.desktop"
fi
}

stop_process() {
if [[ -f "$tempdir/elegance-colors.pid" ]]; then
	pid=$(cat "$tempdir/elegance-colors.pid")
	rm -f "$tempdir/elegance-colors.pid"
	if [[ `grep -s elegance-colors "/proc/$pid/cmdline"` ]]; then
		kill -9 "$pid"
		show_info "Killed process $pid"
	else
		show_warn "$pid does not seem to be elegance-colors"
	fi
else
	show_warn "No running process found"
fi
}

run_process() {
show_info "Starting process"
# Delete old md5
md5self="$tempdir/self-md5"
rm -f "$md5self"
# Stop any previous instances first
[[ -f "$tempdir/elegance-colors.pid" ]] && stop_process
# Write the pid to a file
echo "$$" > "$tempdir/elegance-colors.pid"
while :
do
	# Don't run as root
	if [[ $(whoami) = "root" ]]; then
		show_err "Cannot run process as root"
		exit 1
	fi
	# Check if the script has been changed
	md5s=`md5sum "$selffile"`
	if [[ -f "$md5self" ]]; then
		oldmd5s=`cat "$md5self"`
		if [[ ! "$oldmd5s" = "$md5s" ]]; then
			show_info "Script has been changed, restarting..."
			$0 "$@" &
			exit 0
		fi
	fi
	md5sum "$selffile" > "$md5self"
	# No need to run in background if Gnome Shell is not running
	if ( [ ! "$(pidof gnome-shell)" ] ); then
		show_err "Gnome Shell not running"
		exit 1
	fi
	initialize
	# Check if the current theme name matches elegance-colors
	if [[ `gsettings --schemadir "$schemadir" get org.gnome.shell.extensions.user-theme name | grep -i "elegance-colors"` ]]; then
		monitor_changes
	fi
	sleep 5
done
}

apply_changes() {
initialize
set_theme
}

case "$1" in
	"start")
		run_process;;
	"stop")
		stop_process;;
	"apply")
		apply_changes;;
	"export")
		export_theme "$2";;
	"help")
		man elegance-colors;;
	*)
		exec "$0" start > /dev/null 2>&1 &
		disown;;
esac
